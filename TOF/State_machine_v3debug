#include <Arduino.h>
#include <Adafruit_TinyUSB.h>  // for Serial
#include <Wire.h>
#include <SparkFun_VL53L5CX_Library.h>  //http://librarymanager/All#SparkFun_VL53L5CX

#define deviceAddress1 0x29
// #define deviceAddress2
// #define deviceAddress3
SparkFun_VL53L5CX TOF1;
VL53L5CX_ResultsData measurementData;  // Result data class structure, 1356 byes of RAM

int imageResolution;
int number = 0;
int image_frequency = 10;  //Hz
int time_ISR = 100;        //ms


//////////////////////////////////////////////GLOBAL VARIABLE
int STATE1 = 0, STATE2 = 0, STATE3 = 0;
// STATE 0:  controllo
// STATE 11: allerta 1 livello
// STATE 12: allerta 2 livello
// STATE 2:  allarme
int sampling1 = 0, sampling2 = 0, sampling3 = 0;  //set the 2 modes of sampling
// sampling 0 : chess
// sampling 1 : all the matrix

int threshold1 = 10;  //threshold allerta primo livello  [cm/s]
int threshold2 = 15;  //threshold allerta secondo livello[cm/s]
int alert1_1 = 0;
int alert2_1 = 0;


// int alert1_2 = 0;
// int alert2_2 = 0;
// int alert1_3 = 0;
// int alert2_3 = 0;
int reset_state1 = 0;
const int matrixSize = 8;
int distanceMatrixpast1[matrixSize][matrixSize];  //values stored at t=-1
int distanceMatrix[matrixSize][matrixSize];       //values stored at t=0
int delta_v[matrixSize][matrixSize] = { 0 };      //initializing matrix at 0

SoftwareTimer blinkTimer;  //timer used for ISR


void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Caschetto in fase di set up");

  Wire.begin();           //This resets to 100kHz I2C
  Wire.setClock(400000);  //Sensor has max I2C freq of 400kHz

  ////////////////////////////////////////////////////// SET TOF1 ///////////////////////////////////////////////////

  Serial.println("Initializing TOF1. This can take up to 10s. Please wait.");
  // Ho commentato questo controllo perchè non runnava il codice altrimenti, c'è da controllare questa funzione come va usata

  // if (TOF1.setAddress(deviceAddress1) == false) {
  //   Serial.println(F("TOF1 failed to set new address. Please try again. Freezing..."));
  //   while (1)
  //     ;
  // }

  if (TOF1.begin() == false) {
    Serial.println(F("TOF1 not found - check your wiring. Freezing"));
    while (1)
      ;
  }

  TOF1.setResolution(8 * 8);               //Enable all 64 pads
  imageResolution = TOF1.getResolution();  //Query sensor for current resolution - either 4x4 or 8x8
  //imageWidth = sqrt(imageResolution);    //Calculate printing width

  //Using 4x4, min frequency is 1Hz and max is 60Hz
  //Using 8x8, min frequency is 1Hz and max is 15Hz
  bool response = TOF1.setRangingFrequency(image_frequency);
  if (response == true) {
    int frequency = TOF1.getRangingFrequency();
    if (frequency > 0) {
      Serial.print("Ranging frequency set to ");
      Serial.print(frequency);
      Serial.println(" Hz.");
    } else
      Serial.println(F("Error recovering ranging frequency."));
  } else {
    Serial.println(F("Cannot set ranging frequency requested. Freezing..."));
    while (1)
      ;
  }


  TOF1.startRanging();

  /////////////////////////////////////////////////////// SET TIMER  TOF/////////////////////////////////////////////////

  // Configure the timer with 100 ms interval and define the callback
  blinkTimer.begin(time_ISR, blink_timer_callback);
  // Start the timer
  blinkTimer.start();
}


void loop() {
  /////////////////////////////////////////STATE MACHINE for TOF 1//////////////////////////////////////////////////////
  //After the set up, the state is automatically set at 0 = CONTROLLO
  switch (STATE1) {
    case 0:
      //CONTROLLO
      //Chess control
      sampling1 = 0;

      if (alert1_1 == 1) {
        STATE1 = 11;  //passo ad allerta di primo livello
        alert1_1 = 0;
      }
      break;

    case 11:
      //ALLERTA 1 LIVELLO
      sampling1 = 1;        //complete sampling1

      if (alert2_1 == 1) {  //è stata superata la threshold mentre eravamo in allerta 1 livello
        STATE1 = 12;        //passo ad allerta di secondo livello
        alert2_1 = 0;       //riazzero la flag 
      }
      break;

    case 12:
      //ALLERTA 2 LIVELLO
      sampling1 = 1;        //complete sampling1

      break;

    case 2:
      //ALLARME
      //start buzzer destra
      Serial.println("BUZZER 1 !!!");
      break;
  }
}

void blink_timer_callback(TimerHandle_t xTimerID) {
  (void)xTimerID;

  if (TOF1.isDataReady() == true) {
    if (TOF1.getRangingData(&measurementData)) {
      number = number + 1;
      
      Serial.println(number);

      switch (sampling1) {
        case 0:
          //get the data as a chess board
          sampling1_chess();
          break;

        case 1:
          //get all the data
          sampling1_total();
          break;
      }
    }
  }
}

void sampling1_chess() {
  int conta_alert1 = 0;

  //Save past matrix
  memcpy(distanceMatrixpast1, distanceMatrix, sizeof(distanceMatrix));

  //Save new matrix
  for (int y = 0; y < matrixSize; y = y + 2)  //rows
  {
    for (int x = 0; x < matrixSize; x = x + 2)  //column
    {
      int index = x + (y * matrixSize / 2);  //[0;63]
      distanceMatrix[y / 2][x / 2] = measurementData.distance_mm[index];

      delta_v[y / 2][x / 2] = (distanceMatrixpast1[y / 2][x / 2] - distanceMatrix[y / 2][x / 2]) / time_ISR;  // [cm]/[s]

      //CONTROLLO DA CAMBIARE CON LA DISTANZA
      if (delta_v[y / 2][x / 2] > threshold1) {
        conta_alert1++;
      }

      Serial.print(delta_v[y][x]);
      Serial.print("\t");
    }
    Serial.println();
  }
  Serial.println();
  //Acquisition completed -> check if there is something coming slow
  if (conta_alert1 > 2) {
    alert1_1 = 1;
  }
}


void sampling1_total() {

  int conta_alert2 = 0;
  int minmatrix = 200;
  int minspeed = 200;
  int delta_v[matrixSize][matrixSize] = { 0 };  
  //tenuto l'azzeramento nella matrice soltanto quando cambia da sampling chess a sampling total, stampava altrimenti tutti zeri
  // Probabilmente perchè è troppo veloce il codice dell'interrupt.

  //Save past matrix
  memcpy(distanceMatrixpast1, distanceMatrix, sizeof(distanceMatrix));

  //get, save and print the data
  for (int y = 0; y < matrixSize; y++)  //rows
  {
    for (int x = 0; x < matrixSize; x++)  //column
    {
      int index = x + (y * matrixSize);
      distanceMatrix[y][x] = measurementData.distance_mm[index];
      delta_v[y][x] = (distanceMatrixpast1[y][x] - distanceMatrix[y][x]) / time_ISR;  // [cm]/[s]

      //Check the min distance get by the matrix
      if (distanceMatrixpast1[y][x] - distanceMatrix[y][x] < minmatrix) {
        minmatrix = distanceMatrix[y][x] / 10;  //[cm]
        minspeed = delta_v[y][x];               //[cm/s]
      }
      if (delta_v[y][x] > threshold2)  //threshold in cm/s
      {
        conta_alert2++;  //flag che conta quanti pixel superano la soglia
      }
      Serial.print(delta_v[y][x]);
      Serial.print("\t");
    }
    Serial.println();
  }
  Serial.println();


  //CONTROLLI
  switch (STATE1) {
    case 11:
      //ALLERTA PRIMO LIVELLO
      //se siamo già in allerta di 1 livello, manteniamo controllato che la velocità rilevata,
      //se mantenuta per un secondo, non copra la min distanza tra veicolo e ciclista
      if (minspeed > minmatrix) {
        alert2_1 = 1;  //nel caso entriamo in ALLARME (nello switch case degli stati passiamo allo stato di allarme 2 livello)
      }
      if (conta_alert2 == 0) {
        reset_state1++;  //flag che salva quante volte non si è rilevato nulla dopo l'allerta di primo livello
      }
      if (reset_state1 == 30)  //dopo 3 secondi che sono nello stato di allerta di primo livello, torno allo stato di controllo
      {
        STATE1 = 0;
      }
      break;

    case 12:
      //ALLERTA SECONDO LIVELLO
      //se siamo in allerta di 2 livello, ci basta verificare che, l'iterazione successiva, venga di
      //nuovo superata la soglia2 di 30 cm/s. Con la flag conta_alert2_1 ci assicuriamo che la rilevazione
      //avvenga da parte di un numero considerevole di pixel (4/64)
      if (conta_alert2 > 4) {
        STATE1=2;  // andare subito nello stato di allarme buzzer
        conta_alert2=0;
      } else {
        STATE1 = 0;  // se la soglia non stata superata all'iterazione successiva, torno allo stato di controllo
      }
      break;
  }
}
