#include <Arduino.h>
#include <Adafruit_TinyUSB.h>  // for Serial
#include <Wire.h>
#include <SparkFun_VL53L5CX_Library.h>  //http://librarymanager/All#SparkFun_VL53L5CX

#define deviceAddress1 0x29 
#define deviceAddress2 
#define deviceAddress3 
SparkFun_VL53L5CX TOF1, TOF2, TOF3;
VL53L5CX_ResultsData measurementData;  // Result data class structure, 1356 byes of RAM


int imageResolution;
int number = 0;
int image_frequency = 10;  //Hz
int time_ISR = 100;        //ms


//////////////////////////////////////////////GLOBAL VARIABLE
int STATE1 = 0, STATE2 = 0, STATE3 = 0;
// STATE 0:  controllo
// STATE 11: allerta 1 livello
// STATE 12: allerta 2 livello
// STATE 2:  allarme
int sampling1 = 0, sampling2 = 0, sampling3 = 0;  //set the 2 modes of sampling1
// sampling 0 : chess
// sampling 1 : all the matrix

int threshold1 = 10;  //threshold allerta primo livello  [cm/s]
int threshold2 = 15;  //threshold allerta secondo livello[cm/s]
int alert1_1 = 0;
int alert2_1 = 0;
int reset_state1=0;
int distanceMatrixpast[matrixSize][matrixSize]; //values stored at t=-1

SoftwareTimer blinkTimer;  //timer used for ISR
const int matrixSize = 8;



void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Caschetto in fase di set up");

  Wire.begin();           //This resets to 100kHz I2C
  Wire.setClock(400000);  //Sensor has max I2C freq of 400kHz

  ////////////////////////////////////////////////////// SET TOF1 ///////////////////////////////////////////////////

  Serial.println("Initializing TOF1. This can take up to 10s. Please wait.");

  if (TOF1.setAddress(deviceAddress1) == false)
  {
    Serial.println(F("TOF1 failed to set new address. Please try again. Freezing..."));
    while (1);
  }

  if (TOF1.begin() == false) {
    Serial.println(F("TOF1 not found - check your wiring. Freezing"));
    while (1)
      ;
  }

  TOF1.setResolution(8 * 8);  //Enable all 64 pads
  imageResolution = TOF1.getResolution();  //Query sensor for current resolution - either 4x4 or 8x8
  //imageWidth = sqrt(imageResolution);    //Calculate printing width

  //Using 4x4, min frequency is 1Hz and max is 60Hz
  //Using 8x8, min frequency is 1Hz and max is 15Hz
  bool response = TOF1.setRangingFrequency(image_frequency);
  if (response == true) {
    int frequency = TOF1.getRangingFrequency();
    if (frequency > 0) {
      Serial.print("Ranging frequency set to ");
      Serial.print(frequency);
      Serial.println(" Hz.");
    } else
      Serial.println(F("Error recovering ranging frequency."));
  } else {
    Serial.println(F("Cannot set ranging frequency requested. Freezing..."));
    while (1)
      ;
  }
  TOF1.startRanging();

  ///////////////////////////////////////////////// SET TOF 2 ////////////////////////////////////////////////////////
  Serial.println("Initializing TOF2. This can take up to 10s. Please wait.");

  if (TOF2.setAddress(deviceAddress2) == false)
  {
    Serial.println(F("TOF2 failed to set new address. Please try again. Freezing..."));
    while (1);
  }

  if (TOF2.begin() == false) {
    Serial.println(F("TOF2 not found - check your wiring. Freezing"));
    while (1)
      ;
  }

  TOF2.setResolution(8 * 8);  //Enable all 64 pads
  imageResolution = TOF2.getResolution();  //Query sensor for current resolution - either 4x4 or 8x8
  //imageWidth = sqrt(imageResolution);    //Calculate printing width

  //Using 4x4, min frequency is 1Hz and max is 60Hz
  //Using 8x8, min frequency is 1Hz and max is 15Hz
  bool response = TOF2.setRangingFrequency(image_frequency);
  if (response == true) {
    int frequency = TOF2.getRangingFrequency();
    if (frequency > 0) {
      Serial.print("Ranging frequency set to ");
      Serial.print(frequency);
      Serial.println(" Hz.");
    } else
      Serial.println(F("Error recovering ranging frequency."));
  } else {
    Serial.println(F("Cannot set ranging frequency requested. Freezing..."));
    while (1)
      ;
  }
  TOF2.startRanging();

  /////////////////////////////////////////////// SET TOF 3 ///////////////////////////////////////////////////////////
  Serial.println("Initializing TOF3. This can take up to 10s. Please wait.");

  if (TOF3.setAddress(deviceAddress3) == false)
  {
    Serial.println(F("TOF3 failed to set new address. Please try again. Freezing..."));
    while (1);
  }

  if (TOF3.begin() == false) {
    Serial.println(F("TOF1 not found - check your wiring. Freezing"));
    while (1)
      ;
  }

  TOF3.setResolution(8 * 8);  //Enable all 64 pads
  imageResolution = TOF3.getResolution();  //Query sensor for current resolution - either 4x4 or 8x8
  //imageWidth = sqrt(imageResolution);    //Calculate printing width

  //Using 4x4, min frequency is 1Hz and max is 60Hz
  //Using 8x8, min frequency is 1Hz and max is 15Hz
  bool response = TOF3.setRangingFrequency(image_frequency);
  if (response == true) {
    int frequency = TOF3.getRangingFrequency();
    if (frequency > 0) {
      Serial.print("Ranging frequency set to ");
      Serial.print(frequency);
      Serial.println(" Hz.");
    } else
      Serial.println(F("Error recovering ranging frequency."));
  } else {
    Serial.println(F("Cannot set ranging frequency requested. Freezing..."));
    while (1)
      ;
  }
  TOF3.startRanging();

  /////////////////////////////////////////////////////// SET TIMER  TOF/////////////////////////////////////////////////
  // Configure the timer with 100 ms interval and define the callback
  blinkTimer.begin(time_ISR, blink_timer_callback);

  // Start the timer
  blinkTimer.start();
}


void loop() {
  /////////////////////////////////////////STATE MACHINE for TOF 1//////////////////////////////////////////////////////
  //After the set up, the state is automatically set at 0 = CONTROLLO
  switch (STATE1) {
    case 0:
      //CONTROLLO
      //Chess control
      sampling1 = 0;
      break;

    case 11:
      //ALLERTA 1 LIVELLO
      sampling1 = 1; //complete sampling1
      break;

    case 12:
      //ALLERTA 2 LIVELLO
      sampling1 = 1; //complete sampling1
      break;

    case 2:
      //ALLARME
      //start buzzer destra
      Serial.println("BUZZER 1 !!!");
      break;
  }
  switch (STATE2) {
    case 0:
      //CONTROLLO
      //Chess control
      sampling2 = 0;
    break;

    case 11:
      //ALLERTA 1 LIVELLO
      sampling2 = 1; //complete sampling1
    break;

    case 12:
      //ALLERTA 2 LIVELLO
      sampling2 = 1; //complete sampling1
    break;

    case 2:
      //ALLARME
      //start buzzer centro
      Serial.println("BUZZER 2 !!!");
    break;
  }
  switch (STATE3) {
    case 0:
      //CONTROLLO
      //Chess control
      sampling3 = 0;
    break;

    case 11:
      //ALLERTA 1 LIVELLO
      sampling3 = 1; //complete sampling1
    break;

    case 12:
      //ALLERTA 2 LIVELLO
      sampling3 = 1; //complete sampling1
    break;

    case 2:
      //ALLARME
      //start buzzer sinistra
      Serial.println("BUZZER 3 !!!");
    break;
  }
}

void blink_timer_callback(TimerHandle_t xTimerID) {
  (void)xTimerID;

  if (TOF1.isDataReady() == true) {
    if (TOF1.getRangingData(&measurementData)) {
      Serial.println(number);

      switch (sampling1) {
        case 0:

          //get the data as a chess board
          sampling1_chess();

          if (alert1_1 == 1) 
          {
            STATE1 = 11;  //passo ad allerta di primo livello
            reset_state1=0;
            alert1_1 = 0;
          }
        break;

        case 1:
          //get all the data
          sampling1_total();
          if (alert2_1 == 1) {
            STATE1 = 12; //passo ad allerta di secondo livello
            alert2_1 = 0;
          }
          else
          {
            // only one check is performed
            STATE1 = 0;
          }
        break;
      }
    }
  }

  if (TOF2.isDataReady() == true) {
    if (TOF2.getRangingData(&measurementData)) {
      Serial.println(number);

      switch (sampling2) {
        case 0:

          //get the data as a chess board
          sampling2_chess();

          if (alert1_2 == 1) 
          {
            STATE2 = 11;  //passo ad allerta di primo livello
            reset_state2=0;
            alert1_2 = 0;
          }
        break;

        case 1:
          //get all the data
          sampling2_total();
          if (alert2_2 == 1) {
            STATE2 = 12; //passo ad allerta di secondo livello
            alert2_1 = 0;
          }
          else
          {
            // only one check is performed
            STATE2 = 0;
          }
        break;
      }
    }
  }
  if (TOF3.isDataReady() == true) {
    if (TOF3.getRangingData(&measurementData)) {
      Serial.println(number);

      switch (sampling3) {
        case 0:

          //get the data as a chess board
          sampling3_chess();

          if (alert1_3 == 1) 
          {
            STATE3 = 11;  //passo ad allerta di primo livello
            reset_state3=0;
            alert1_3 = 0;
          }
        break;

        case 1:
          //get all the data
          sampling3_total();
          if (alert2_3 == 1) {
            STATE3 = 12; //passo ad allerta di secondo livello
            alert2_3 = 0;
          }
          else
          {
            // only one check is performed
            STATE3 = 0;
          }
        break;
      }
    }
  }
}

void sampling1_chess() {
  

  int conta_alert1=0;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //Save new matrix
  for (int y = 0; y < matrixSize; y=y+2)  //rows
  {
    for (int x = 0; x < matrixSize; x=x+2)  //column
    {
      int index = x + (y * matrixSize / 2); //[0;63]
      distanceMatrix[y/2][x/2] = measurementData.distance_mm[index];

      delta_v[y/2][x/2] = (distanceMatrixpast1[y/2][x/2] - distanceMatrix[y/2][x/2]) / time_ISR; // [cm]/[s]

      //CONTROLLO DA CAMBIARE CON LA DISTANZA
      if (delta_v[y/2][x/2] > threshold1) {
        conta_alert1++;  
      }

      Serial.print(delta_v[y][x]);
      Serial.print("\t");
    }
    Serial.println();
  }
  Serial.println();
  //Acquisition completed -> check if there is something coming slow
  if(conta_alert1>2)
  {
    alert1_1=1;
  }
  //Save past matrix
  memcpy(distanceMatrixpast1, distanceMatrix, sizeof(distanceMatrix));
  
}


void sampling1_total() {

  int conta_alert2=0;
  int minmatrix=200;
  int minspeed=200;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //get, save and print the data
  for (int y = 0; y < matrixSize; y++)  //rows
  {
    for (int x = 0; x < matrixSize; x++)  //column
    {
      int index = x + (y * matrixSize);
      distanceMatrix[y][x] = measurementData.distance_mm[index];
      delta_v[y][x] = (distanceMatrixpast1[y][x] - distanceMatrix[y][x]) / time_ISR; // [cm]/[s]
      
      //Check the min distance get by the matrix
      if(distanceMatrixpast1[y][x] - distanceMatrix[y][x] < minmatrix)
      {
        minmatrix=distanceMatrix[y][x]/10; //[cm]
        minspeed= delta_v[y][x]; //[cm/s]
      }
      if (delta_v[y][x] > threshold2)  //threshold in cm/s
      {
        conta_alert2++;  //flag che conta quanti pixel superano la soglia
      }
      Serial.print(delta_v[y][x]);
      Serial.print("\t");

    }
    Serial.println();
  }
  Serial.println();

  //Save past matrix
  memcpy(distanceMatrixpast1, distanceMatrix, sizeof(distanceMatrix));

  //CONTROLLI
  switch(STATE1)
  {
    case 11:
      //ALLERTA PRIMO LIVELLO
      //se siamo già in allerta di 1 livello, manteniamo controllato che la velocità rilevata,
      //se mantenuta per un secondo, non copra la min distanza tra veicolo e ciclista
      if(minspeed > minmatrix)
      {
        alert2_1=1; //nel caso entriamo in ALLARME
      }
      if(conta_alert2==0)
      {
        reset_state1++; //flag che salva quante volte non si è rilevato nulla dopo l'allerta di primo livello
      }
      if(reset_state1==30) //dopo 3 secondi
      {
        STATE1=0;
      }
    break;

    case 12:
      //ALLERTA SECONDO LIVELLO
      //se siamo in allerta di 2 livello, ci basta verificare che, l'iterazione successiva, venga di
      //nuovo superata la soglia2 di 30 cm/s. Con la flag conta_alert2_1 ci assicuriamo che la rilevazione
      //avvenga da parte di un numero considerevole di pixel (4/64)
      if(conta_alert2>4)
      {
        alert2_1=1; //update the flag
      }
      else
      {
        STATE1=0;
      }
    break;
  }
}

void sampling2_chess() {
  

  int conta_alert1=0;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //Save new matrix
  for (int y = 0; y < matrixSize; y=y+2)  //rows
  {
    for (int x = 0; x < matrixSize; x=x+2)  //column
    {
      int index = x + (y * matrixSize / 2); //[0;63]
      distanceMatrix[y/2][x/2] = measurementData.distance_mm[index];

      delta_v[y/2][x/2] = (distanceMatrixpast2[y/2][x/2] - distanceMatrix[y/2][x/2]) / time_ISR; // [cm]/[s]

      //CONTROLLO DA CAMBIARE CON LA DISTANZA
      if (delta_v[y/2][x/2] > threshold1) {
        conta_alert1++;  
      }

      Serial.print(delta_v[y][x]);
      Serial.print("\t");
    }
    Serial.println();
  }
  Serial.println();
  //Acquisition completed -> check if there is something coming slow
  if(conta_alert1>2)
  {
    alert1_2=1;
  }
  //Save past matrix
  memcpy(distanceMatrixpast1, distanceMatrix, sizeof(distanceMatrix));
  
}


void sampling2_total() {

  int conta_alert2=0;
  int minmatrix=200;
  int minspeed=200;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //get, save and print the data
  for (int y = 0; y < matrixSize; y++)  //rows
  {
    for (int x = 0; x < matrixSize; x++)  //column
    {
      int index = x + (y * matrixSize);
      distanceMatrix[y][x] = measurementData.distance_mm[index];
      delta_v[y][x] = (distanceMatrixpast2[y][x] - distanceMatrix[y][x]) / time_ISR; // [cm]/[s]
      
      //Check the min distance get by the matrix
      if(distanceMatrixpast2[y][x] - distanceMatrix[y][x] < minmatrix)
      {
        minmatrix=distanceMatrix[y][x]/10; //[cm]
        minspeed= delta_v[y][x]; //[cm/s]
      }
      if (delta_v[y][x] > threshold2)  //threshold in cm/s
      {
        conta_alert2++;  //flag che conta quanti pixel superano la soglia
      }
      Serial.print(delta_v[y][x]);
      Serial.print("\t");

    }
    Serial.println();
  }
  Serial.println();

  //Save past matrix
  memcpy(distanceMatrixpast2, distanceMatrix, sizeof(distanceMatrix));
  
  //CONTROLLI
  switch(STATE2)
  {
    case 11:
      //ALLERTA PRIMO LIVELLO
      //se siamo già in allerta di 1 livello, manteniamo controllato che la velocità rilevata,
      //se mantenuta per un secondo, non copra la min distanza tra veicolo e ciclista
      if(minspeed > minmatrix)
      {
        alert2_2=1; //nel caso entriamo in ALLARME
      }
      if(conta_alert2==0)
      {
        reset_state2++; //flag che salva quante volte non si è rilevato nulla dopo l'allerta di primo livello
      }
      if(reset_state2==30) //dopo 3 secondi
      {
        STATE2=0;
      }
    break;

    case 12:
      //ALLERTA SECONDO LIVELLO
      //se siamo in allerta di 2 livello, ci basta verificare che, l'iterazione successiva, venga di
      //nuovo superata la soglia2 di 30 cm/s. Con la flag conta_alert2_1 ci assicuriamo che la rilevazione
      //avvenga da parte di un numero considerevole di pixel (4/64)
      if(conta_alert2>4)
      {
        alert2_2=1; //update the flag
      }
      else
      {
        STATE2=0;
      }
    break;
  }
}

void sampling3_chess() {
  

  int conta_alert1=0;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //Save new matrix
  for (int y = 0; y < matrixSize; y=y+2)  //rows
  {
    for (int x = 0; x < matrixSize; x=x+2)  //column
    {
      int index = x + (y * matrixSize / 2); //[0;63]
      distanceMatrix[y/2][x/2] = measurementData.distance_mm[index];

      delta_v[y/2][x/2] = (distanceMatrixpast3[y/2][x/2] - distanceMatrix[y/2][x/2]) / time_ISR; // [cm]/[s]

      //CONTROLLO DA CAMBIARE CON LA DISTANZA
      if (delta_v[y/2][x/2] > threshold1) {
        conta_alert1++;  
      }

      Serial.print(delta_v[y][x]);
      Serial.print("\t");
    }
    Serial.println();
  }
  Serial.println();
  //Acquisition completed -> check if there is something coming slow
  if(conta_alert1>2)
  {
    alert1_3=1;
  }
  //Save past matrix
  memcpy(distanceMatrixpast3, distanceMatrix, sizeof(distanceMatrix));
  
}


void sampling3_total() {

  int conta_alert2=0;
  int minmatrix=200;
  int minspeed=200;
  int distanceMatrix[matrixSize][matrixSize];     //value stored at t=0
  int delta_v[matrixSize][matrixSize] = { 0 };    //initializing matrix at 0
  //get, save and print the data
  for (int y = 0; y < matrixSize; y++)  //rows
  {
    for (int x = 0; x < matrixSize; x++)  //column
    {
      int index = x + (y * matrixSize);
      distanceMatrix[y][x] = measurementData.distance_mm[index];
      delta_v[y][x] = (distanceMatrixpast3[y][x] - distanceMatrix[y][x]) / time_ISR; // [cm]/[s]
      
      //Check the min distance get by the matrix
      if(distanceMatrixpast3[y][x] - distanceMatrix[y][x] < minmatrix)
      {
        minmatrix=distanceMatrix[y][x]/10; //[cm]
        minspeed= delta_v[y][x]; //[cm/s]
      }
      if (delta_v[y][x] > threshold2)  //threshold in cm/s
      {
        conta_alert2++;  //flag che conta quanti pixel superano la soglia
      }
      Serial.print(delta_v[y][x]);
      Serial.print("\t");

    }
    Serial.println();
  }
  Serial.println();

  //Save past matrix
  memcpy(distanceMatrixpast3, distanceMatrix, sizeof(distanceMatrix));
  
  //CONTROLLI
  switch(STATE3)
  {
    case 11:
      //ALLERTA PRIMO LIVELLO
      //se siamo già in allerta di 1 livello, manteniamo controllato che la velocità rilevata,
      //se mantenuta per un secondo, non copra la min distanza tra veicolo e ciclista
      if(minspeed > minmatrix)
      {
        alert2_3=1; //nel caso entriamo in ALLARME
      }
      if(conta_alert2==0)
      {
        reset_state3++; //flag che salva quante volte non si è rilevato nulla dopo l'allerta di primo livello
      }
      if(reset_state3==30) //dopo 3 secondi
      {
        STATE3=0;
      }
    break;

    case 12:
      //ALLERTA SECONDO LIVELLO
      //se siamo in allerta di 2 livello, ci basta verificare che, l'iterazione successiva, venga di
      //nuovo superata la soglia2 di 30 cm/s. Con la flag conta_alert2_1 ci assicuriamo che la rilevazione
      //avvenga da parte di un numero considerevole di pixel (4/64)
      if(conta_alert2>4)
      {
        alert2_3=1; //update the flag
      }
      else
      {
        STATE3=0;
      }
    break;
  }
}
